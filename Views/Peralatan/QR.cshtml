@model AparAppsWebsite.Models.QRCodeResponse
@{
    ViewData["Title"] = $"QR Code - {Model.Kode}";
}
<!-- lib QRCode lokal (CDN) -->
@* <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script> *@

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header text-center bg-primary text-white">
                    <h3 class="card-title mb-0">QR Code Preview</h3>
                    <p class="mb-0">Equipment: <strong>@Model.Kode</strong></p>
                </div>

                <div class="card-body">
                    <div class="row">
                        <!-- QR Code Display Section -->
                        <div class="col-md-8">
                            <div class="row">
                                <!-- Main QR Code -->
                                <div class="col-md-6 text-center">
                                    <h5 class="text-primary">Scan Ready QR Code (with logo)</h5>

                                    <div class="qr-main-container mb-3">
                                        <!-- canvas utama -->
                                        <canvas id="mainQRCanvas"
                                            class="border border-3 border-primary rounded shadow bg-white"
                                            style="max-width: 320px; width: 100%; height: auto; padding: 10px;"></canvas>
                                        <img id="imgQRFallback" alt="QR Fallback"
                                            class="d-none border border-3 border-primary rounded shadow bg-white"
                                            style="max-width: 320px; width: 100%; height: auto; padding: 10px;" />

                                    </div>

                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-success" onclick="downloadQR('medium')">
                                            <i class="fas fa-download"></i> Download
                                        </button>
                                        <button type="button" class="btn btn-primary" onclick="printProfessionalQR()">
                                            <i class="fas fa-print"></i> Print Label
                                        </button>
                                        @* <button type="button" class="btn btn-info" onclick="testScan()">
                                            <i class="fas fa-mobile-alt"></i> Test Scan
                                        </button> *@
                                    </div>
                                </div>

                                <!-- Size & ECC Options -->
                                <div class="col-md-6">
                                    <h5 class="text-primary">Quality Options</h5>
                                    <div class="size-options">
                                        <div class="mb-3">
                                            <label class="form-label">QR Code Size:</label>
                                            <select id="sizeSelect" class="form-select" onchange="changeQRSize()">
                                                <option value="small">Small (~200px) - Mobile</option>
                                                <option value="medium" selected>Medium (~300px) - Standard</option>
                                                <option value="large">Large (~400px) - High Quality</option>
                                                <option value="print">Print (~500px) - Professional</option>
                                            </select>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Error Correction:</label>
                                            <select id="eccSelect" class="form-select" onchange="changeQRSize()">
                                                <option value="L">Low (7%)</option>
                                                <option value="M" selected>Medium (15%)</option>
                                                <option value="Q">Quartile (25%)</option>
                                                <option value="H">High (30%)</option>
                                            </select>
                                        </div>

                                        <div class="alert alert-info">
                                            <small>
                                                <strong>Recommendations:</strong><br>
                                                • Gunakan <strong>ECC H</strong> jika logo menutupi bagian tengah<br>
                                                • <strong>Large/Print</strong> untuk sticker fisik & jarak scan jauh
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- QR Data & Metadata -->
                        <div class="col-md-4">
                            <h5 class="text-primary">QR Code Information</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <table class="table table-sm table-borderless">
                                        <tr>
                                            <td><strong>Equipment:</strong></td>
                                            <td>@Model.Kode</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Token:</strong></td>
                                            <td><small class="font-monospace">@Model.TokenQR</small></td>
                                        </tr>
                                        <tr>
                                            <td><strong>Encoded:</strong></td>
                                            <td>URL / Deeplink (dengan logo)</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Scan Data:</strong></td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-outline-secondary"
                                                    onclick="showQRData()">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                            </div>

                            <div class="mt-3">
                                <h6 class="text-success">✅ Mobile App Integration</h6>
                                <ul class="small text-muted">
                                    <li>Auto-load checklist via token</li>
                                    <li>Compatible dengan route BE</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <hr>

                    <!-- Professional Print Layout Preview -->
                    @* <div class="row">
                        <div class="col-12">
                            <h5 class="text-primary">Professional Label Preview</h5>
                            <div class="print-preview border rounded p-3 bg-light">
                                <div class="row align-items-center">
                                    <div class="col-md-3 text-center">
                                        <!-- pratinjau pakai <img> dari dataURL canvas -->
                                        <img id="printPreviewQR" src="" alt="QR Preview"
                                            style="width: 120px; height: 120px;">
                                    </div>
                                    <div class="col-md-9">
                                        <h6 class="mb-1">Equipment QR Code</h6>
                                        <table class="table table-sm table-borderless">
                                            <tr>
                                                <td><strong>Code:</strong></td>
                                                <td>@Model.Kode</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Type:</strong></td>
                                                <td>Fire Safety Equipment</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Location:</strong></td>
                                                <td>Building A - Floor 1</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Scan:</strong></td>
                                                <td>Point camera at QR code to inspect</td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> *@
                </div>

                <div class="card-footer">
                    <div class="d-flex justify-content-between">
                        <a href="@Url.Action("Index")" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to Equipment
                        </a>
                        <div>
                            <a href="@Url.Action("Edit", new { id = ViewContext.RouteData.Values["id"] })"
                                class="btn btn-warning">
                                <i class="fas fa-edit"></i> Edit Equipment
                            </a>
                            <button type="button" class="btn btn-success" onclick="generateBatch()">
                                <i class="fas fa-clone"></i> Batch Generate
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- QR Data Modal -->
<div class="modal fade" id="qrDataModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">QR Code Scan Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <pre id="qrDataContent" class="bg-light p-3 rounded"></pre>
                <div class="mt-3">
                    <button type="button" class="btn btn-outline-secondary" onclick="copyQRData()">
                        <i class="fas fa-copy"></i> Copy Data
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ==== Data dari server ====
        const qru = '@(Model.QrUrl ?? "")';
        const apiBase = '@(ViewBag.ApiBase as string ?? "")';
        const token = '@Model.TokenQR';
        const kode = '@Model.Kode';
        const fallbackUrl = (apiBase && token) ? `${apiBase}/api/peralatan/with-checklist?token=${token}` : '';
        const effectiveData = qru && qru.length > 0 ? qru : fallbackUrl;

        const logoUrl = '@Url.Content("~/images/kpc-logo.png")';
        const SIZES = { small: 200, medium: 300, large: 400, print: 500 };
        const qrImgService = (size, ecc = 'M') =>
            `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&ecc=${ecc}&qzone=2&format=png&data=${encodeURIComponent(effectiveData)}`;

        // Render on load
        if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', safeRenderQR);
        else safeRenderQR();

        function changeQRSize() { safeRenderQR(); }

        async function safeRenderQR() {
            try { await renderWithPreferredLib(); }
            catch (e1) {
                console.warn('[QR] modern lib gagal, coba QRCodeJS fallback:', e1);
                try { await renderWithQRCodeJS(); }
                catch (e2) {
                    console.warn('[QR] QRCodeJS juga gagal, pakai gambar eksternal:', e2);
                    await renderWithExternalImage();
                }
            }
        }

        // ========== 1) Modern lib (qrcode@1.5.x) ==========
        async function renderWithPreferredLib() {
            const canvas = getCanvas();
            const size = getSize();
            const ecc = getECC();

            // Pastikan library ada; kalau tidak, load cepat dari CDN (sekali)
            if (!(window.QRCode && typeof QRCode.toCanvas === 'function')) {
                await loadScriptOnce('https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js');
            }
            if (!(window.QRCode && typeof QRCode.toCanvas === 'function')) {
                throw new Error('Library qrcode@1.5.x tidak tersedia');
            }

            await QRCode.toCanvas(canvas, effectiveData, { width: size, margin: 2, errorCorrectionLevel: ecc });
            await drawCenterLogo(canvas, logoUrl, { ratio: 0.22, paddingRatio: 0.06, rounded: true });
            setPreviewFromCanvas(canvas);
            showCanvas();
        }

        // ========== 2) QRCodeJS (cdnjs) ==========
        async function renderWithQRCodeJS() {
            const canvas = getCanvas();
            const size = getSize();
            const ecc = getECC();

            if (!(window.QRCode && typeof QRCode === 'function' && !QRCode.toCanvas)) {
                await loadScriptOnce('https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js');
            }
            if (!(window.QRCode && typeof QRCode === 'function' && !QRCode.toCanvas)) {
                throw new Error('Library QRCodeJS tidak tersedia');
            }

            // render ke temp node
            const holder = document.createElement('div');
            holder.style.position = 'absolute'; holder.style.left = '-9999px';
            document.body.appendChild(holder);

            const CL = (QRCode.CorrectLevel || { L: 1, M: 0, Q: 3, H: 2 });
            new QRCode(holder, { text: effectiveData, width: size, height: size, correctLevel: (CL[ecc] ?? CL.M) });

            const genCanvas = holder.querySelector('canvas');
            if (!genCanvas) { holder.remove(); throw new Error('QRCodeJS tidak menghasilkan canvas'); }

            // salin ke canvas utama
            canvas.width = size; canvas.height = size;
            canvas.getContext('2d').drawImage(genCanvas, 0, 0, size, size);
            holder.remove();

            await drawCenterLogo(canvas, logoUrl, { ratio: 0.22, paddingRatio: 0.06, rounded: true });
            setPreviewFromCanvas(canvas);
            showCanvas();
        }

        // ========== 3) External image (qrserver) ==========
        async function renderWithExternalImage() {
            const canvas = getCanvas();
            const imgTag = document.getElementById('imgQRFallback');
            const size = getSize(); const ecc = getECC();
            const url = qrImgService(size, ecc);

            try {
                const img = await loadImage(url, /*cors*/true);
                // coba gambar ke canvas (butuh CORS OK)
                canvas.width = size; canvas.height = size;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, size, size);
                await drawCenterLogo(canvas, logoUrl, { ratio: 0.22, paddingRatio: 0.06, rounded: true });
                setPreviewFromCanvas(canvas);
                showCanvas(); // sukses pakai canvas
            } catch (e) {
                console.warn('[QR] Tidak bisa draw ke canvas (CORS?), tampilkan IMG saja.', e);
                hideCanvas();
                imgTag.src = url; imgTag.classList.remove('d-none'); // tampilkan gambar tanpa logo
            }
        }

        // ===== Helpers =====
        function getCanvas() { const c = document.getElementById('mainQRCanvas'); if (!c) throw new Error('Canvas tidak ditemukan'); return c; }
        function getSize() { const key = document.getElementById('sizeSelect')?.value || 'medium'; const s = SIZES[key] || SIZES.medium; return s; }
        function getECC() { return document.getElementById('eccSelect')?.value || 'M'; }

        function drawRoundedRect(ctx, x, y, w, h, r) {
            const m = Math.min(w, h); r = Math.min(r, m / 2);
            ctx.beginPath(); ctx.moveTo(x + r, y);
            ctx.arcTo(x + w, y, x + w, y + h, r); ctx.arcTo(x + w, y + h, x, y + h, r);
            ctx.arcTo(x, y + h, x, y, r); ctx.arcTo(x, y, x + w, y, r);
            ctx.closePath();
        }
        function loadImage(src, cors) {
            return new Promise((res, rej) => {
                const img = new Image(); if (cors) img.crossOrigin = 'anonymous';
                img.onload = () => res(img); img.onerror = rej; img.src = src;
            });
        }
        async function drawCenterLogo(canvas, src, opts) {
            const img = await loadImage(src, /*cors*/false);
            if (!img) return;
            const ctx = canvas.getContext('2d');
            const cw = canvas.width, ch = canvas.height;
            const logoW = Math.floor(cw * (opts?.ratio ?? 0.20));
            const logoH = Math.floor(logoW * (img.height / img.width));
            const pad = Math.floor(logoW * (opts?.paddingRatio ?? 0.05));
            const boxW = logoW + pad * 2, boxH = logoH + pad * 2;
            const x = Math.floor((cw - boxW) / 2), y = Math.floor((ch - boxH) / 2);
            ctx.save(); ctx.fillStyle = '#fff';
            if (opts?.rounded) { drawRoundedRect(ctx, x, y, boxW, boxH, Math.round(boxW * 0.12)); ctx.fill(); }
            else { ctx.fillRect(x, y, boxW, boxH); }
            ctx.restore();
            ctx.drawImage(img, x + pad, y + pad, logoW, logoH);
        }
        function setPreviewFromCanvas(canvas) {
            const preview = document.getElementById('printPreviewQR');
            if (preview) preview.src = canvas.toDataURL('image/png');
        }
        function showCanvas() {
            document.getElementById('mainQRCanvas').classList.remove('d-none');
            document.getElementById('imgQRFallback').classList.add('d-none');
        }
        function hideCanvas() { document.getElementById('mainQRCanvas').classList.add('d-none'); }

        function loadScriptOnce(src) {
            return new Promise((resolve, reject) => {
                // kalau sudah pernah dimuat, skip
                if ([...document.scripts].some(s => s.src === src)) { resolve(); return; }
                const s = document.createElement('script'); s.src = src; s.defer = true;
                s.onload = () => resolve(); s.onerror = () => reject(new Error('gagal load ' + src));
                document.head.appendChild(s);
            });
        }

        // download/print tetap bekerja saat pakai canvas;
        // jika sedang pakai IMG fallback, kita regenerasi via external image tanpa logo.
        function downloadQR(sizeKey) {
            const size = SIZES[sizeKey] || SIZES.medium;
            const ecc = 'H';
            const canvas = document.getElementById('mainQRCanvas');
            if (!canvas.classList.contains('d-none')) {
                const a = document.createElement('a');
                a.href = canvas.toDataURL('image/png'); a.download = `QR_${kode}_${sizeKey || 'medium'}.png`;
                document.body.appendChild(a); a.click(); a.remove();
            } else {
                const a = document.createElement('a');
                a.href = qrImgService(size, ecc); a.download = `QR_${kode}_${sizeKey || 'medium'}.png`;
                document.body.appendChild(a); a.click(); a.remove();
            }
        }
        function printProfessionalQR() {
            const canvas = document.getElementById('mainQRCanvas');
            const imgTag = document.getElementById('imgQRFallback');
            const src = !canvas.classList.contains('d-none') ? canvas.toDataURL('image/png') : imgTag.src;
            const win = window.open('', '_blank');
            win.document.write(`
                      <div style="text-align:center;font-family:Arial;">
                        <h2>${kode}</h2>
                        <img src="${src}" style="width:300px;height:300px;">
                        <p>Scan untuk info lengkap</p>
                        <small>Generated: ${new Date().toLocaleString()}</small>
                      </div>
                      <script>window.onload=()=>window.print()<\/script>
                    `);
            win.document.close();
        }
        function showQRData() {
            const meta = { kode, token, scan: effectiveData };
            document.getElementById('qrDataContent').textContent = JSON.stringify(meta, null, 2);
            new bootstrap.Modal(document.getElementById('qrDataModal')).show();
        }
        function copyQRData() { navigator.clipboard.writeText(effectiveData).then(() => alert('URL scan disalin!')); }
        function testScan() { if (effectiveData) window.open(effectiveData, '_blank'); }
        function generateBatch() { alert('Fitur batch generate\nComing soon…'); }
    </script>
}
