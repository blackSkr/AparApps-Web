@model AparAppsWebsite.Models.LokasiFormVM
@using Microsoft.AspNetCore.Mvc.Rendering
@{
  ViewData["Title"] = "Edit Lokasi";
  var opsi = Model.PICOptions ?? new List<AparAppsWebsite.Models.PetugasOption>();
  var selectItems = opsi.Select(p => new SelectListItem(
  text: $"{p.EmployeeNama} ({p.BadgeNumber}) — {p.RoleNama}",
  value: p.Id.ToString()
  )).ToList();

  // ✅ pastikan existingIdsJson terdefinisi supaya tidak error
  var existingIdsJson = System.Text.Json.JsonSerializer.Serialize(Model.CurrentPetugas.Select(x => x.Id));
}

<partial name="~/Views/Shared/_Alerts.cshtml" />

<h2 class="mb-3">Edit Lokasi</h2>

<form asp-action="Edit" method="post" novalidate>
  @Html.AntiForgeryToken()
  <input type="hidden" asp-for="Id" />

  <div class="mb-3">
    <label class="form-label">Nama</label>
    <input asp-for="Nama" class="form-control" />
    <span asp-validation-for="Nama" class="text-danger"></span>
  </div>

  <div class="row">
    <div class="mb-3">
      <label class="form-label">Detail Nama Lokasi (opsional)</label>
      <input asp-for="DetailNamaLokasi" class="form-control"
        placeholder="Contoh: Gedung B / Lantai 3 / Blok A2 / Gudang Barat" />
    </div>

    <div class="col-md-6 mb-3">
      <label class="form-label">Latitude</label>
      <input asp-for="lat" type="text" class="form-control" data-val="false" inputmode="decimal" step="any" />
      <small class="form-text text-muted">Contoh: -0.435873</small>
      <span asp-validation-for="lat" class="text-danger"></span>
    </div>
    <div class="col-md-6 mb-3">
      <label class="form-label">Longitude</label>
      <input asp-for="Longitude" type="text" class="form-control" data-val="false" inputmode="decimal" step="any" />
      <small class="form-text text-muted">Contoh: 117.204876</small>
      <span asp-validation-for="Longitude" class="text-danger"></span>
    </div>
  </div>

  @* MAP PICKER *@
  @{
    ViewData["forLat"] = "lat";
    ViewData["forLng"] = "Longitude";
    ViewData["startLat"] = Model.lat ?? -6.200000;
    ViewData["startLng"] = Model.Longitude ?? 106.816666;
    ViewData["startZoom"] = 15;
  }
  <partial name="~/Views/Shared/_MapPicker.cshtml" />

  <div class="mb-4">
    <label class="form-label">PIC Utama (opsional)</label>
    <select asp-for="PICPetugasId" class="form-select" asp-items="selectItems">
      <option value="">-- Tanpa PIC --</option>
    </select>
    <span asp-validation-for="PICPetugasId" class="text-danger"></span>
  </div>

  <div class="d-flex gap-2">
    <button class="btn btn-primary">Simpan Perubahan</button>
    <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-secondary">Batal</a>
  </div>
</form>

<hr class="my-4" />

<div class="card mb-3">
  <div class="card-body">
    <h5 class="card-title mb-3">Petugas di Lokasi Ini</h5>
    @if (!(Model.CurrentPetugas?.Any() ?? false))
    {
      <div class="text-muted">Belum ada petugas.</div>
    }
    else
    {
      <ul class="list-group">
        @foreach (var p in Model.CurrentPetugas)
        {
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <div>
              <strong>@(p.Nama ?? "-")</strong>
              <span class="text-muted">(@p.BadgeNumber) — @(p.Role ?? "-")</span>
            </div>
            <div class="d-flex gap-2">
              <form asp-action="AddPetugas" method="post" class="d-inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="lokasiId" value="@Model.Id" />
                <input type="hidden" name="petugasId" value="@p.Id" />
                <input type="hidden" name="asPIC" value="true" />
                <button class="btn btn-outline-primary btn-sm" title="Jadikan PIC">Jadikan PIC</button>
              </form>
              <form asp-action="UnlinkPetugas" method="post" class="d-inline"
                onsubmit="return confirm('Unlink petugas ini?');">
                @Html.AntiForgeryToken()
                <input type="hidden" name="lokasiId" value="@Model.Id" />
                <input type="hidden" name="petugasId" value="@p.Id" />
                <button class="btn btn-outline-danger btn-sm">Hapus / Unlink</button>
              </form>
            </div>
          </li>
        }
      </ul>
    }
  </div>
</div>

<div class="card">
  <div class="card-body">
    <h5 class="card-title mb-3">Tambah PIC Tambahan</h5>
    <div class="d-flex gap-2 align-items-end mb-3">
      <div class="flex-grow-1">
        <label class="form-label">Pilih Petugas</label>
        <select id="ddl-new-pic" class="form-select">
          <option value="">-- Pilih petugas --</option>
          @foreach (var it in selectItems)
          {
            <option value="@it.Value">@it.Text</option>
          }
        </select>
      </div>
      <button type="button" id="btn-add-new" class="btn btn-outline-primary">Tambah ke Daftar</button>
    </div>
    <div id="hint-new-empty" class="text-muted">Belum ada di daftar.</div>
    <ul id="list-new" class="list-group mb-3"></ul>
    <form id="form-addmany" asp-action="AddManyPIC" method="post">
      @Html.AntiForgeryToken()
      <input type="hidden" name="lokasiId" value="@Model.Id" />
      <div id="hidden-new-container"></div>
      <button type="submit" class="btn btn-success btn-sm" disabled id="btn-submit-new">Tambah Semua</button>
    </form>
  </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />

  <script>
    // Sanitasi live: koma -> titik
    (function () {
      const form = document.querySelector('form');
      const lat = form?.querySelector('[name="lat"]');
      const lng = form?.querySelector('[name="Longitude"]');
      function sanitize(e) { const v = e.target.value || ''; const nv = v.replace(',', '.'); if (nv !== v) e.target.value = nv; }
      lat?.addEventListener('input', sanitize);
      lng?.addEventListener('input', sanitize);
    })();
  </script>

  <script>
    // Add-Many PIC
    (function () {
      const ddl = document.getElementById('ddl-new-pic');
      const btnAdd = document.getElementById('btn-add-new');
      const list = document.getElementById('list-new');
      const hidden = document.getElementById('hidden-new-container');
      const hint = document.getElementById('hint-new-empty');
      const submitBtn = document.getElementById('btn-submit-new');
      const existingIds = new Set(JSON.parse('@Html.Raw(existingIdsJson)'));
      const state = new Map();

      function refresh() { hint.style.display = state.size ? 'none' : 'block'; submitBtn.disabled = state.size === 0; }
      function removeItem(id) {
        state.delete(id);
        list.querySelector(`li[data-id="${id}"]`)?.remove();
        hidden.querySelector(`input[data-id="${id}"]`)?.remove();
        refresh();
      }
      function addItem(id, text) {
        if (!id || state.has(id)) return;
        const idNum = parseInt(id);
        if (existingIds.has(idNum)) return;
        const picUtama = document.querySelector('[name="PICPetugasId"]')?.value;
        if (picUtama && String(picUtama) === String(id)) return;

        state.set(id, text);
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.dataset.id = id;
        li.innerHTML = `<span>${text}</span><button type="button" class="btn btn-sm btn-outline-danger">Hapus</button>`;
        li.querySelector('button').addEventListener('click', () => removeItem(id));
        list.appendChild(li);

        const input = document.createElement('input');
        input.type = 'hidden'; input.name = 'petugasIds'; input.value = id; input.dataset.id = id;
        hidden.appendChild(input);
        refresh();
      }
      btnAdd.addEventListener('click', () => {
        const id = ddl.value, text = ddl.options[ddl.selectedIndex]?.text; addItem(id, text);
      });
      document.querySelector('[name="PICPetugasId"]')?.addEventListener('change', (e) => {
        const id = e.target.value; if (id && state.has(id)) removeItem(id);
      });
      refresh();
    })();
  </script>
}
